# -*- coding: utf-8 -*-
"""thebiggermod.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fMmpdcaWLJUnqe8zg1QDNJpaaUM4qnL2

[![Roboflow Notebooks](https://media.roboflow.com/notebooks/template/bannertest2-2.png?ik-sdk-version=javascript-1.4.3&updatedAt=1672932710194)](https://github.com/roboflow/notebooks)

# Fine-tune PaliGemma on Object Detection Dataset

---

[![GitHub](https://badges.aleen42.com/src/github.svg)](https://github.com/google-research/big_vision/blob/main/big_vision/configs/proj/paligemma/README.md)
[![Roboflow](https://raw.githubusercontent.com/roboflow-ai/notebooks/main/assets/badges/roboflow-blogpost.svg)](https://blog.roboflow.com/how-to-fine-tune-paligemma/)
[![YouTube](https://badges.aleen42.com/src/youtube.svg)](https://www.youtube.com/watch?v=OMBmVInx68M)

PaliGemma is an open vision-language model (VLM) inspired by PaLI-3, built with
open components, such as
the [SigLIP vision model](https://colab.research.google.com/github/google-research/big_vision/blob/main/big_vision/configs/proj/image_text/SigLIP_demo.ipynb)
and
the [Gemma language model](https://ai.google.dev/gemma).
PaliGemma is designed as a versatile model for transfer to a wide range of
vision-language tasks such as image and short video caption, visual question
answering, text reading, object detection and object segmentation. Together with
the pretrained and transfer checkpoints at multiple resolutions, we provide a
checkpoint transferred to a mixture of tasks that can be used for off-the-shelf
exploration.

This notebook is an extension of the [official notebook](https://colab.research.google.com/github/google-research/big_vision/blob/main/big_vision/configs/proj/paligemma/finetune_paligemma.ipynb) prepared by Google Research.

![PaliGemma model](https://storage.cloud.google.com/com-roboflow-marketing/notebooks/examples/paligemma.png)

This notebook shows how to fine-tune [PaliGemma](https://ai.google.dev/gemma/docs/paligemma) on a vision-language task with [JAX](https://jax.readthedocs.io/en/latest/index.html). *Fine-tuning* is a process that can improve your model's performance on specific tasks or help the model adhere to specific output requirements when instructions aren't sufficient and you have a set of examples that demonstrate the outputs you want. Gemma-based models like PaliGemma require fine-tuning to produce expected results.

To make it runnable on a T4 colab runtime with 16GB HBM and 12GB RAM, we opt to only finetune the attention layers of the language model and freeze the other parameters.

## Setup

### Get access to PaliGemma

Before using PaliGemma for the first time, you must request access to the model through Kaggle by completing the following steps:

1. Log in to [`Kaggle`](https://www.kaggle.com), or create a new Kaggle account if you don't already have one.
1. Go to the [`PaliGemma Model Card`](https://www.kaggle.com/models/google/paligemma/) and click `Request Access`.
1. Complete the consent form and accept the terms and conditions.

### Configure your API keys

To use PaliGemma, you need to provide your Kaggle username, Kaggle API key, and Roboflow API key. Follow these steps:

- Open your [`Kaggle Settings`](https://www.kaggle.com/settings) page. Click `Create New Token`. This will download a `kaggle.json` file containing your API credentials.
- Go to your [`Roboflow Settings`](https://app.roboflow.com/settings/api) page. Click `Copy`. This will place your private key in the clipboard.
- In Colab, go to the left pane and click on `Secrets` (🔑).
    - Store Kaggle Username under the name `KAGGLE_USERNAME`.
    - Store Kaggle API Key under the name `KAGGLE_KEY`.
    - Store Roboflow API Key under the name `ROBOFLOW_API_KEY`.

### Select the runtime

Let's make sure that we have access to GPU. We can use `nvidia-smi` command to do that. In case of any problems navigate to `Edit` -> `Notebook settings` -> `Hardware accelerator`, set it to `T4 GPU`, and then click `Save`.
"""

!nvidia-smi

"""### Download dataset from Roboflow Universe

To fine-tune PaliGemma, prepare your dataset in JSONL format. You can use Roboflow to easily convert any dataset into this format.
"""

!pip install -q roboflow
!pip install -q git+https://github.com/roboflow/supervision.git

from google.colab import userdata
from roboflow import Roboflow
ROBOFLOW_API_KEY = userdata.get('ROBOFLOW_API_KEY')
rf = Roboflow(api_key=ROBOFLOW_API_KEY)

project = rf.workspace("cocoforrcnn").project("permutation1")
version = project.version(1)
dataset = version.download("paligemma")




# project = rf.workspace("roboflow-jvuqo").project("number-ops-j1426")
# version = project.version(1)
# dataset = version.download("paligemma")

!head -n 5 {dataset.location}/dataset/_annotations.train.jsonl

!head -n 5 {dataset.location}/dataset/_annotations.valid.jsonl

!head -n 5 {dataset.location}/dataset/_annotations.test.jsonl

import cv2
import json
import supervision as sv
from typing import List

def read_n_lines(file_path: str, n: int) -> List[str]:
    with open(file_path, 'r') as file:
        lines = [next(file).strip() for _ in range(n)]
    return lines

images = []
lines = read_n_lines(f"{dataset.location}/dataset/_annotations.train.jsonl", 25)
first = json.loads(lines[0])

CLASSES = first.get('prefix').replace("detect ", "").split(" ; ")

for line in lines:
    data = json.loads(line)
    image = cv2.imread(f"{dataset.location}/dataset/{data.get('image')}")
    (h, w, _) = image.shape
    detections = sv.Detections.from_lmm(
        lmm='paligemma',
        result=data.get('suffix'),
        resolution_wh=(w, h),
        classes=CLASSES)

    image = sv.BoxAnnotator(thickness=4).annotate(image, detections)
    image = sv.LabelAnnotator(text_scale=2, text_thickness=4).annotate(image, detections)
    images.append(image)

sv.plot_images_grid(images, (5, 5))

"""### Fetch the `big_vision` repository and install related dependencies

Download the `big_vision` repository to your Colab notebook from GitHub and install dependencies related to `big_vision` by running the following code.
"""

import os
import sys

# TPUs with
if "COLAB_TPU_ADDR" in os.environ:
  raise "It seems you are using Colab with remote TPUs which is not supported."

# Fetch big_vision repository if python doesn't know about it and install
# dependencies needed for this notebook.
if not os.path.exists("big_vision_repo"):
  !git clone --quiet --branch=main --depth=1 \
     https://github.com/google-research/big_vision big_vision_repo

# Append big_vision code to python import path
if "big_vision_repo" not in sys.path:
  sys.path.append("big_vision_repo")

# Install missing dependencies. Assume jax~=0.4.25 with GPU available.
!pip3 install -q "overrides" "ml_collections" "einops~=0.7" "sentencepiece"

"""### Set environment variables

Set the environment variables for `KAGGLE_USERNAME` and `KAGGLE_KEY`.
"""

import os
from google.colab import userdata

# Note: `userdata.get` is a Colab API. If you're not using Colab, set the env
# vars as appropriate or make your credentials available in ~/.kaggle/kaggle.json

os.environ["KAGGLE_USERNAME"] = userdata.get('KAGGLE_USERNAME')
os.environ["KAGGLE_KEY"] = userdata.get('KAGGLE_KEY')

"""### Import JAX and other dependencies

Import JAX and other dependencies required for PaliGemma, like TensorFlow and NumPy.
"""

import base64
import functools
import html
import io
import os
import warnings

import jax
import jax.numpy as jnp
import numpy as np
import ml_collections

import tensorflow as tf
import sentencepiece

from IPython.core.display import display, HTML
from PIL import Image
from tqdm.notebook import tqdm

# Import model definition from big_vision
from big_vision.models.proj.paligemma import paligemma
from big_vision.trainers.proj.paligemma import predict_fns

# Import big vision utilities
import big_vision.datasets.jsonl
import big_vision.utils
import big_vision.sharding

# Don't let TF use the GPU or TPUs
tf.config.set_visible_devices([], "GPU")
tf.config.set_visible_devices([], "TPU")

backend = jax.lib.xla_bridge.get_backend()
print(f"JAX version:  {jax.__version__}")
print(f"JAX platform: {backend.platform}")
print(f"JAX devices:  {jax.device_count()}")

"""## Download and configure the model

In this step, you'll download the model checkpoint and configure it so that you can fine-tune it later on. This step shows you how to move model parameters into TPU memory, which is useful for fine-tuning models on devices with limited resources.

### Download the model checkpoint

PaliGemma includes several model variations. For this tutorial, you'll use the base [JAX/FLAX PaliGemma 3B weight model](https://www.kaggle.com/models/google/paligemma/jax/paligemma-3b-pt-224).

Download the `float16` version of the model checkpoint from Kaggle by running the following code. This process takes several minutes to complete.
"""

import os
import kagglehub

# MODEL_PATH = "./pt_224_128.params.f16.npz"
# if not os.path.exists(MODEL_PATH):
#     print("Downloading the checkpoint from Kaggle, this could take a few minutes....")
#     # Note: kaggle archive contains the same checkpoint in multiple formats.
#     # Download only the float16 model.
#     MODEL_PATH = kagglehub.model_download('google/paligemma/jax/paligemma-3b-pt-224', 'paligemma-3b-pt-224.f16.npz')
#     print(f"Model path: {MODEL_PATH}")

# TOKENIZER_PATH = "./paligemma_tokenizer.model"
# if not os.path.exists(TOKENIZER_PATH):
#     print("Downloading the model tokenizer...")
#     !gsutil cp gs://big_vision/paligemma_tokenizer.model {TOKENIZER_PATH}
#     print(f"Tokenizer path: {TOKENIZER_PATH}")
MODEL_ID = "google/paligemma-3b-pt-896"

# Model paths
MODEL_PATH = "./pt_896_128.params.f16.npz"
TOKENIZER_PATH = "./paligemma_tokenizer.model"

# Download model checkpoint
if not os.path.exists(MODEL_PATH):
    print("Downloading 896px model checkpoint...")
    MODEL_PATH = kagglehub.model_download(
        'google/paligemma/jax/paligemma-3b-pt-896',
        'paligemma-3b-pt-896.f16.npz'
    )

# Download tokenizer (same for all resolutions)
if not os.path.exists(TOKENIZER_PATH):
    print("Downloading tokenizer...")
    !gsutil cp gs://big_vision/paligemma_tokenizer.model {TOKENIZER_PATH}

print(f"Model path: {MODEL_PATH}")
print(f"Tokenizer path: {TOKENIZER_PATH}")

"""### Configure the model

It's time to actually start configuring the model that you're going to use.

For this notebook, you need to be able to fit your model onto a T4 GPU. Having a limited resource like space constraints means that you have to be mindful of how your model is configured.

If you fine-tune every parameter, your model won't be able to run in the notebook environment. As a result, in this part of the notebook, you'll configure your model so that it has the ability to freeze some of the parameters, and only fine-tune the parameters that really need to be fine-tuned for the model to give you accurate results. In LLMs, parameters are said to be *frozen* when they are no longer actively being used to train the model.

In order to configure your model, you need to:

* Initialize the `model_config` as a [`FrozenConfigDict`](https://github.com/google/ml_collections/tree/master#frozenconfigdict) so that you can freeze some of the parameters and keep memory usage low
* Initialize an instance of the PaliGemma `Model` class using the `model_config` as its configurations
* Load the model parameters into RAM
* Define a `decode` function to sample outputs from the model

This code in this cell takes about a minute to run to completion.
"""

# Define model
model_config = ml_collections.FrozenConfigDict({
    "llm": {"vocab_size": 257_152},
    "img": {"variant": "So400m/14", "pool_type": "none", "scan": True, "dtype_mm": "float16"}
})
model = paligemma.Model(**model_config)
tokenizer = sentencepiece.SentencePieceProcessor(TOKENIZER_PATH)

# Load params - this can take up to 1 minute in T4 colabs.
params = paligemma.load(None, MODEL_PATH, model_config)

# Define `decode` function to sample outputs from the model.
decode_fn = predict_fns.get_all(model)['decode']
decode = functools.partial(decode_fn, devices=jax.devices(), eos_token=tokenizer.eos_id())

"""### Move model parameters into GPU/TPU memory

Now you need to move the model parameters into GPU/TPU memory. First, shard the parameters across the available GPUs, then load the parameters. Here, you'll load the parameters sequentially. This process takes longer than loading them simultaneously, but it requires more RAM than you have available in this notebook.

Finally, print out all of the parameters to see what type each individual parameter is cast to. Frozen parameters are kept as `float16`, while the trainable parameters are cast to `float32`. When you inspect the list, you'll see that most of the parameters have been frozen and are `float16`.
"""

# Create a pytree mask of the trainable params.
def is_trainable_param(name, param):  # pylint: disable=unused-argument
  if name.startswith("llm/layers/attn/"):  return True
  if name.startswith("llm/"):              return False
  if name.startswith("img/"):              return False
  raise ValueError(f"Unexpected param name {name}")
trainable_mask = big_vision.utils.tree_map_with_names(is_trainable_param, params)

# If more than one device is available (e.g. multiple GPUs) the parameters can
# be sharded across them to reduce HBM usage per device.
mesh = jax.sharding.Mesh(jax.devices(), ("data"))

data_sharding = jax.sharding.NamedSharding(
    mesh, jax.sharding.PartitionSpec("data"))

params_sharding = big_vision.sharding.infer_sharding(
    params, strategy=[('.*', 'fsdp(axis="data")')], mesh=mesh)

# Yes: Some donated buffers are not usable.
warnings.filterwarnings(
    "ignore", message="Some donated buffers were not usable")

@functools.partial(jax.jit, donate_argnums=(0,), static_argnums=(1,))
def maybe_cast_to_f32(params, trainable):
  return jax.tree.map(lambda p, m: p.astype(jnp.float32) if m else p,
                      params, trainable)

# Loading all params in simultaneous - albeit much faster and more succinct -
# requires more RAM than the T4 colab runtimes have by default.
# Instead we do it param by param.
params, treedef = jax.tree.flatten(params)
sharding_leaves = jax.tree.leaves(params_sharding)
trainable_leaves = jax.tree.leaves(trainable_mask)
for idx, (sharding, trainable) in enumerate(zip(sharding_leaves, trainable_leaves)):
  params[idx] = big_vision.utils.reshard(params[idx], sharding)
  params[idx] = maybe_cast_to_f32(params[idx], trainable)
  params[idx].block_until_ready()
params = jax.tree.unflatten(treedef, params)

# Print params to show what the model is made of.
def parameter_overview(params):
  for path, arr in big_vision.utils.tree_flatten_with_names(params)[0]:
    print(f"{path:80s} {str(arr.shape):22s} {arr.dtype}")

print(" == Model params == ")
parameter_overview(params)

"""## Prepare to tune the model

Now that your model is configured, you can tune it. In this step, you'll create your model's inputs as well as the training and validation iterators, view the training examples, and define the training and validation loops.

### Create model inputs

The model checkpoint you're using has already been trained on images of various aspect ratios that have been resized to 224x224 pixels, and to handle tokenized texts.

The code below defines three functions that you'll use in the next step create the model's inputs:

* **`preprocess_image`:** Normalizes the image data. In this case, pre-processing converts the passed-in image to greyscale, removes the alpha layer, and resizes the passed-in image to the size required by the model for image inputs (224x224 pixels).
* **`preprocess_tokens`:** Splits the tokens up and adds flags to mark whether a token is a prefix or suffix token. These flags will be used later on in the code, during the training step and the evaluation loop.
* **`postprocess_tokens`:** Removes any tokens left at and/or after the end-of-sequence (EOS) token and returns the remaining decoded tokens.
"""

def preprocess_image(image, size=896):
    image = np.asarray(image)

    # Remove alpha layer if present (keep only first 3 channels)
    image = image[..., :3]  # This handles RGB(A) -> RGB conversion

    # Verify we have 3 channels (throws error for grayscale/2-channel images)
    assert image.shape[-1] == 3, f"Expected 3 channels, got {image.shape[-1]}"

    image = tf.constant(image)
    image = tf.image.resize(image, (size, size), method='bilinear', antialias=True)
    return image.numpy() / 127.5 - 1.0  # [0, 255]->[-1,1]


# Enhanced Image Preprocessing Functions for 1024x128 to 896x896 Conversion
def preprocess_image_with_padding(image, size=896):
    """
    Enhanced preprocessing for images with proper aspect ratio handling and coordinate scaling.
    Handles 1024x128 images by padding to square and returns scaling factors for coordinate adjustment.
    
    Args:
        image: Input image (PIL Image or numpy array)
        size: Target square size (default 896)
    
    Returns:
        tuple: (processed_image, transform_params)
            - processed_image: Normalized image array in [-1, 1] range
            - transform_params: Dictionary with transformation parameters for coordinate scaling
    """
    image = np.asarray(image)
    
    # Remove alpha layer if present (keep only first 3 channels)
    image = image[..., :3]  # This handles RGB(A) -> RGB conversion
    
    # Verify we have 3 channels (throws error for grayscale/2-channel images)
    assert image.shape[-1] == 3, f"Expected 3 channels, got {image.shape[-1]}"
    
    original_height, original_width = image.shape[:2]
    
    # Calculate scale factor to fit the larger dimension to target size
    # while maintaining aspect ratio
    scale = min(size / original_width, size / original_height)
    
    # Calculate new dimensions after scaling
    new_width = int(original_width * scale)
    new_height = int(original_height * scale)
    
    # Resize image maintaining aspect ratio
    image = tf.constant(image)
    image = tf.image.resize(image, (new_height, new_width), method='bilinear', antialias=True)
    image = image.numpy()
    
    # Create a square canvas with padding
    padded_image = np.full((size, size, 3), 128, dtype=image.dtype)  # Gray padding
    
    # Calculate padding offsets to center the image
    y_offset = (size - new_height) // 2
    x_offset = (size - new_width) // 2
    
    # Place the resized image in the center of the padded canvas
    padded_image[y_offset:y_offset + new_height, x_offset:x_offset + new_width] = image
    
    # Return normalized image and transformation parameters
    return padded_image / 127.5 - 1.0, {
        'scale': scale,
        'x_offset': x_offset,
        'y_offset': y_offset,
        'original_width': original_width,
        'original_height': original_height,
        'new_width': new_width,
        'new_height': new_height
    }


def scale_coordinates_to_square(coordinates_str, transform_params, target_size=896):
    """
    Scale bounding box coordinates from original image space to square padded image space.
    
    Args:
        coordinates_str: String with location tokens like "<loc0592><loc0402><loc1023><loc0409>"
        transform_params: Dictionary with transformation parameters from preprocess_image_with_padding
        target_size: Target square image size (default 896)
    
    Returns:
        String with scaled location tokens
    """
    import re
    
    # Extract all location tokens
    loc_pattern = r'<loc(\d{4})>'
    locations = re.findall(loc_pattern, coordinates_str)
    
    if len(locations) == 0:
        return coordinates_str
    
    # Convert to actual coordinates (PaliGemma uses 1024-based coordinate system)
    coords = [int(loc) for loc in locations]
    
    scaled_coords = []
    for i in range(0, len(coords), 4):  # Process bounding boxes (x1, y1, x2, y2)
        if i + 3 < len(coords):
            # Original coordinates in 1024 coordinate space
            x1, y1, x2, y2 = coords[i], coords[i+1], coords[i+2], coords[i+3]
            
            # Convert from 1024 coordinate space to original image space
            orig_x1 = (x1 / 1024.0) * transform_params['original_width']
            orig_y1 = (y1 / 1024.0) * transform_params['original_height']
            orig_x2 = (x2 / 1024.0) * transform_params['original_width']
            orig_y2 = (y2 / 1024.0) * transform_params['original_height']
            
            # Scale to new image space
            new_x1 = orig_x1 * transform_params['scale']
            new_y1 = orig_y1 * transform_params['scale']
            new_x2 = orig_x2 * transform_params['scale']
            new_y2 = orig_y2 * transform_params['scale']
            
            # Add padding offsets
            final_x1 = new_x1 + transform_params['x_offset']
            final_y1 = new_y1 + transform_params['y_offset']
            final_x2 = new_x2 + transform_params['x_offset']
            final_y2 = new_y2 + transform_params['y_offset']
            
            # Convert back to 1024 coordinate space for PaliGemma
            scaled_x1 = int((final_x1 / target_size) * 1024)
            scaled_y1 = int((final_y1 / target_size) * 1024)
            scaled_x2 = int((final_x2 / target_size) * 1024)
            scaled_y2 = int((final_y2 / target_size) * 1024)
            
            # Clamp coordinates to valid range
            scaled_x1 = max(0, min(1023, scaled_x1))
            scaled_y1 = max(0, min(1023, scaled_y1))
            scaled_x2 = max(0, min(1023, scaled_x2))
            scaled_y2 = max(0, min(1023, scaled_y2))
            
            scaled_coords.extend([scaled_x1, scaled_y1, scaled_x2, scaled_y2])
    
    # Reconstruct the coordinate string
    result = coordinates_str
    for i, (old_coord, new_coord) in enumerate(zip(coords, scaled_coords)):
        old_token = f"<loc{old_coord:04d}>"
        new_token = f"<loc{new_coord:04d}>"
        result = result.replace(old_token, new_token, 1)
    
    return result


def validate_coordinate_scaling(original_coords, scaled_coords, transform_params, target_size=896):
    """
    Validate that coordinate scaling is working correctly by checking if the 
    scaled coordinates properly represent the same relative positions.
    
    Args:
        original_coords: Original coordinate string
        scaled_coords: Scaled coordinate string  
        transform_params: Transformation parameters
        target_size: Target image size
    
    Returns:
        Dictionary with validation results
    """
    import re
    
    # Extract coordinates from both strings
    loc_pattern = r'<loc(\d{4})>'
    orig_locs = [int(loc) for loc in re.findall(loc_pattern, original_coords)]
    scaled_locs = [int(loc) for loc in re.findall(loc_pattern, scaled_coords)]
    
    if len(orig_locs) != len(scaled_locs):
        return {"valid": False, "error": "Coordinate count mismatch"}
    
    validation_results = {
        "valid": True,
        "bounding_boxes": [],
        "transform_applied": transform_params
    }
    
    for i in range(0, len(orig_locs), 4):
        if i + 3 < len(orig_locs):
            # Original bounding box
            orig_x1, orig_y1, orig_x2, orig_y2 = orig_locs[i:i+4]
            scaled_x1, scaled_y1, scaled_x2, scaled_y2 = scaled_locs[i:i+4]
            
            # Convert to relative coordinates for comparison
            orig_rel_x1 = orig_x1 / 1024.0
            orig_rel_y1 = orig_y1 / 1024.0
            orig_rel_x2 = orig_x2 / 1024.0
            orig_rel_y2 = orig_y2 / 1024.0
            
            scaled_rel_x1 = scaled_x1 / 1024.0
            scaled_rel_y1 = scaled_y1 / 1024.0
            scaled_rel_x2 = scaled_x2 / 1024.0
            scaled_rel_y2 = scaled_y2 / 1024.0
            
            bbox_info = {
                "bbox_index": i // 4,
                "original": {"x1": orig_x1, "y1": orig_y1, "x2": orig_x2, "y2": orig_y2},
                "scaled": {"x1": scaled_x1, "y1": scaled_y1, "x2": scaled_x2, "y2": scaled_y2},
                "original_relative": {"x1": orig_rel_x1, "y1": orig_rel_y1, "x2": orig_rel_x2, "y2": orig_rel_y2},
                "scaled_relative": {"x1": scaled_rel_x1, "y1": scaled_rel_y1, "x2": scaled_rel_x2, "y2": scaled_rel_y2}
            }
            
            validation_results["bounding_boxes"].append(bbox_info)
    
    return validation_results


def test_enhanced_preprocessing():
    """
    Test function to validate the enhanced preprocessing with actual dataset images.
    """
    print("Testing Enhanced Preprocessing with Dataset...")
    
    # Test with a single example from your dataset
    for example in train_dataset.get_tfdata().take(1).as_numpy_iterator():
        image = Image.open(io.BytesIO(example["image"]))
        
        print(f"Original image shape: {np.asarray(image).shape}")
        
        # Process with enhanced function
        processed_image, transform_params = preprocess_image_with_padding(image)
        
        print(f"Processed image shape: {processed_image.shape}")
        print("Transform parameters:")
        for key, value in transform_params.items():
            if isinstance(value, float):
                print(f"  {key}: {value:.3f}")
            else:
                print(f"  {key}: {value}")
        
        # Test coordinate scaling
        suffix = example["suffix"].decode().lower()
        print(f"\nOriginal suffix: {suffix}")
        
        scaled_suffix = scale_coordinates_to_square(suffix, transform_params)
        print(f"Scaled suffix: {scaled_suffix}")
        
        # Validate the scaling
        validation = validate_coordinate_scaling(suffix, scaled_suffix, transform_params)
        print(f"\nValidation: {validation['valid']}")
        if validation['bounding_boxes']:
            for i, bbox in enumerate(validation['bounding_boxes']):
                print(f"  Box {i}: {bbox['original']} -> {bbox['scaled']}")
        
        break
    
    print("Enhanced preprocessing test completed!")


def preprocess_tokens(prefix, suffix=None, seqlen=None):
  # Model has been trained to handle tokenized text composed of a prefix with
  # full attention and a suffix with causal attention.
  separator = "\n"
  tokens = tokenizer.encode(prefix, add_bos=True) + tokenizer.encode(separator)
  mask_ar = [0] * len(tokens)    # 0 to use full attention for prefix.
  mask_loss = [0] * len(tokens)  # 0 to not use prefix tokens in the loss.

  if suffix:
    suffix = tokenizer.encode(suffix, add_eos=True)
    tokens += suffix
    mask_ar += [1] * len(suffix)    # 1 to use causal attention for suffix.
    mask_loss += [1] * len(suffix)  # 1 to use suffix tokens in the loss.

  mask_input = [1] * len(tokens)    # 1 if it's a token, 0 if padding.
  if seqlen:
    padding = [0] * max(0, seqlen - len(tokens))
    tokens = tokens[:seqlen] + padding
    mask_ar = mask_ar[:seqlen] + padding
    mask_loss = mask_loss[:seqlen] + padding
    mask_input = mask_input[:seqlen] + padding

  return jax.tree.map(np.array, (tokens, mask_ar, mask_loss, mask_input))

def postprocess_tokens(tokens):
  tokens = tokens.tolist()  # np.array to list[int]
  try:  # Remove tokens at and after EOS if any.
    eos_pos = tokens.index(tokenizer.eos_id())
    tokens = tokens[:eos_pos]
  except ValueError:
    pass
  return tokenizer.decode(tokens)

"""### Create the training and validation iterators

Create two iterators:

*   A **training iterator** to allow the training process to go through the data in chunks rather than processing it all at once. This allows you to do some data pre-processing before use.
*   A **validation iterator** that allows the training process to iterate over the validation dataset to see how well the tuned model aligned with the provided results.
"""

SEQLEN = 128

train_dataset = big_vision.datasets.jsonl.DataSource(
    os.path.join(dataset.location, "dataset/_annotations.train.jsonl"),
    fopen_keys={"image": f"{dataset.location}/dataset"})

val_dataset = big_vision.datasets.jsonl.DataSource(
    os.path.join(dataset.location, "dataset/_annotations.valid.jsonl"),
    fopen_keys={"image": f"{dataset.location}/dataset"})


def train_data_iterator():
  """Never ending iterator over training examples."""
  # Shuffle examples and repeat so one can train for many epochs.
  dataset = train_dataset.get_tfdata().shuffle(1_000).repeat()
  for example in dataset.as_numpy_iterator():
    image = Image.open(io.BytesIO(example["image"]))
    
    # Use enhanced preprocessing with coordinate tracking
    processed_image, transform_params = preprocess_image_with_padding(image)
    
    prefix = example["prefix"].decode().lower()
    suffix = example["suffix"].decode().lower()
    
    # Scale coordinates in the suffix if present
    scaled_suffix = scale_coordinates_to_square(suffix, transform_params)
    
    tokens, mask_ar, mask_loss, _ = preprocess_tokens(prefix, scaled_suffix, SEQLEN)
    label, _, _, _ = preprocess_tokens(scaled_suffix, seqlen=SEQLEN)

    yield {
        "image": np.asarray(processed_image),
        "text": np.asarray(tokens),
        "label": np.asarray(label),
        "mask_ar": np.asarray(mask_ar),
        "mask_loss": np.asarray(mask_loss),
    }


def validation_data_iterator():
  """Single iterator over validation examples with enhanced preprocessing for 1024x128 images."""
  for example in val_dataset.get_tfdata(ordered=True).as_numpy_iterator():
    image = Image.open(io.BytesIO(example["image"]))
    
    # Use enhanced preprocessing with coordinate tracking
    processed_image, transform_params = preprocess_image_with_padding(image)
    
    prefix = example["prefix"].decode().lower()
    suffix = example["suffix"].decode().lower()
    
    # Scale coordinates in the suffix if present
    scaled_suffix = scale_coordinates_to_square(suffix, transform_params)
    
    tokens, mask_ar, _, mask_input = preprocess_tokens(prefix, seqlen=SEQLEN)
    label, _, _, _ = preprocess_tokens(scaled_suffix, seqlen=SEQLEN)

    yield {
        "image": np.asarray(processed_image),
        "text": np.asarray(tokens),
        "label": np.asarray(label),
        "mask_ar": np.asarray(mask_ar),
        "mask_input": np.asarray(mask_input),
    }


# Enhanced Data Iterators with Coordinate Scaling
def enhanced_train_data_iterator():
  """Enhanced training iterator with coordinate scaling for 1024x128 to 896x896 conversion."""
  # Shuffle examples and repeat so one can train for many epochs.
  dataset = train_dataset.get_tfdata().shuffle(1_000).repeat()
  for example in dataset.as_numpy_iterator():
    image = Image.open(io.BytesIO(example["image"]))
    
    # Use enhanced preprocessing with coordinate tracking
    processed_image, transform_params = preprocess_image_with_padding(image)
    
    prefix = example["prefix"].decode().lower()
    suffix = example["suffix"].decode().lower()
    
    # Scale coordinates in the suffix if present
    scaled_suffix = scale_coordinates_to_square(suffix, transform_params)
    
    tokens, mask_ar, mask_loss, _ = preprocess_tokens(prefix, scaled_suffix, SEQLEN)
    label, _, _, _ = preprocess_tokens(scaled_suffix, seqlen=SEQLEN)

    yield {
        "image": np.asarray(processed_image),
        "text": np.asarray(tokens),
        "label": np.asarray(label),
        "mask_ar": np.asarray(mask_ar),
        "mask_loss": np.asarray(mask_loss),
    }


def enhanced_validation_data_iterator():
  """Enhanced validation iterator with coordinate scaling for 1024x128 to 896x896 conversion."""
  for example in val_dataset.get_tfdata(ordered=True).as_numpy_iterator():
    image = Image.open(io.BytesIO(example["image"]))
    
    # Use enhanced preprocessing with coordinate tracking
    processed_image, transform_params = preprocess_image_with_padding(image)
    
    prefix = example["prefix"].decode().lower()
    suffix = example["suffix"].decode().lower()
    
    # Scale coordinates in the suffix if present
    scaled_suffix = scale_coordinates_to_square(suffix, transform_params)
    
    tokens, mask_ar, _, mask_input = preprocess_tokens(prefix, seqlen=SEQLEN)
    label, _, _, _ = preprocess_tokens(scaled_suffix, seqlen=SEQLEN)

    yield {
        "image": np.asarray(processed_image),
        "text": np.asarray(tokens),
        "label": np.asarray(label),
        "mask_ar": np.asarray(mask_ar),
        "mask_input": np.asarray(mask_input),
    }

"""### View training examples

In this notebook, the training data contains 90 images that are paired with long descriptions of what's depicted in the image.

**Note:** Normal training data sets that are meant to be used for practical use cases should contain more images, but this notebook limits the number of data points so that you can train the model in a reasonable amount of time for an example.

The code below prints a random selection of images with their descriptions from the training data set so that you can see what the images and descriptions your model is trained on looks like. Each image is displayed in as a 128x128 pixel JPEG, with the description printed next to the image to the right.
"""

def split_and_keep_second_part(s):
    parts = s.split('\n', 1)
    if len(parts) > 1:
        return parts[1]
    return s

def render_inline(image, resize=(128, 128)):
    """Convert image into inline html."""
    image = Image.fromarray(image)
    image.resize(resize)
    with io.BytesIO() as buffer:
        image.save(buffer, format='jpeg')
        image_b64 = str(base64.b64encode(buffer.getvalue()), "utf-8")
        return f"data:image/jpeg;base64,{image_b64}"

def render_example(image, caption):
    image = ((image + 1)/2 * 255).astype(np.uint8)  # [-1,1] -> [0, 255]
    h, w, _ = image.shape
    try:
        detections = sv.Detections.from_lmm(
            lmm='paligemma',
            result=caption,
            resolution_wh=(w, h),
            classes=CLASSES)
        image = sv.BoundingBoxAnnotator().annotate(image, detections)
        image = sv.LabelAnnotator().annotate(image, detections)
    except:
        print(caption)
    return f"""
<div style="display: inline-flex; align-items: center; justify-content: center;">
    <img style="width:128px; height:128px;" src="{render_inline(image, resize=(64,64))}" />
    <p style="width:256px; margin:10px; font-size:small;">{html.escape(caption)}</p>
</div>
"""

html_out = ""
for idx, example in zip(range(4), train_data_iterator()):
    caption = postprocess_tokens(example["text"])  # detokenize model input.
    caption = split_and_keep_second_part(caption)
    html_out += render_example(example["image"], caption)

print("Training examples")
display(HTML(html_out))

"""### Define the training and evaluation loops

Define the training loop to train the model on the provided dataset, and the evaluation loop to look at all of the examples in the validation dataset and make its predictions.

#### Defining the training loop

The `update_fn` function defines the training step. During the training step, the loss per example is calculated and stochastic gradient descent (SGD) is applied to the trainable parameters.

Recall that earlier in the notebook, you included flags in the `preprocess_tokens` function that included `mask_loss`. You'll use the `mask_loss` flag here to exclude prefix and padded tokens from the loss. Without it, the loss calculation will be skewed. You also need to normalize each example, since each of them has a different number of tokens. After the prefix and padded tokens have been excluded and the examples have been normalized, you can calculate the loss per example.

The training step also includes a function to apply an SGD to optimize the training.

#### Defining the evaluation loop

The `make_predictions` function is your evaluation loop. The evaluation loop is fairly straight forward with one notable change. If you recall from the beginning of the notebook, you only have 90 examples in your training data set. This is a very small amount of training examples, and your model ends up not having enough examples for the batch size when you run the training. This means that in the evaluation loop, you need to pad the batch by repeating examples.

To make sure that your evaluation loop only counts actual examples and not the padded examples, you have to apply a mask to the padded examples that excludes them from the output.
"""

# The main update_fn using a simple stochastic gradient descent (SGD).
@functools.partial(jax.jit, donate_argnums=(0,))
def update_fn(params, batch, learning_rate):
  imgs, txts, mask_ar = batch["image"], batch["text"], batch["mask_ar"]

  def loss_fn(params):
    text_logits, _ = model.apply({"params": params}, imgs, txts[:, :-1], mask_ar[:, :-1], train=True)
    logp = jax.nn.log_softmax(text_logits, axis=-1)

    # The model takes as input txts[:, :-1] but the loss is defined as predicting
    # next tokens txts[:, 1:]. Additionally, mask_loss[:, 1:] indicates which tokens
    # are part of the loss (e.g. prefix and padded tokens are not included).
    mask_loss = batch["mask_loss"][:, 1:]
    targets = jax.nn.one_hot(txts[:, 1:], text_logits.shape[-1])

    # Compute the loss per example. i.e. the mean of per token pplx.
    # Since each example has a different number of tokens we normalize it.
    token_pplx = jnp.sum(logp * targets, axis=-1)  # sum across vocab_size.
    example_loss = -jnp.sum(token_pplx * mask_loss, axis=-1)  # sum across seq_len.
    example_loss /= jnp.clip(jnp.sum(mask_loss, -1), 1)  # weight by num of tokens.

    # batch_loss: mean of per example loss.
    return jnp.mean(example_loss)

  loss, grads = jax.value_and_grad(loss_fn)(params)

  # Apply gradients to trainable params using SGD.
  def apply_grad(param, gradient, trainable):
    if not trainable: return param
    return param - learning_rate * gradient

  params = jax.tree_util.tree_map(apply_grad, params, grads, trainable_mask)

  return params, loss

# Evaluation/inference loop.
def make_predictions(data_iterator, *, num_examples=None,
                     batch_size=1, seqlen=SEQLEN, sampler="greedy"):
  outputs = []
  while True:
    # Construct a list of examples in the batch.
    examples = []
    try:
      for _ in range(batch_size):
        examples.append(next(data_iterator))
        examples[-1]["_mask"] = np.array(True)  # Indicates true example.
    except StopIteration:
      if len(examples) == 0:
        return outputs

    # Not enough examples to complete a batch. Pad by repeating last example.
    while len(examples) % batch_size:
      examples.append(dict(examples[-1]))
      examples[-1]["_mask"] = np.array(False)  # Indicates padding example.

    # Convert list of examples into a dict of np.arrays and load onto devices.
    batch = jax.tree.map(lambda *x: np.stack(x), *examples)
    batch = big_vision.utils.reshard(batch, data_sharding)

    # Make model predictions
    tokens = decode({"params": params}, batch=batch,
                    max_decode_len=seqlen, sampler=sampler)

    # Fetch model predictions to device and detokenize.
    tokens, mask = jax.device_get((tokens, batch["_mask"]))
    tokens = tokens[mask]  # remove padding examples.
    labels = [postprocess_tokens(e["label"]) for e in examples]
    responses = [postprocess_tokens(t) for t in tokens]

    # Append to html output.
    for example, label, response in zip(examples, labels, responses):
      outputs.append((example["image"], label, response))
      if num_examples and len(outputs) >= num_examples:
        return outputs

html_out = ""
for image, _, caption in make_predictions(validation_data_iterator(), num_examples=4, batch_size=1):
  html_out += render_example(image, caption)
display(HTML(html_out))

"""## Tune the model

Now that you've set everything up and taken a look at the training data, it's time to finally tune the model. The code below runs the training loop for the model for 64 steps and prints the learning rate (`lr` in the printed output) and loss rate for each step.

Every 16 steps, the model prints what its predictions are at that step in the training. This code prints out predictions for the same set of images so that you can see the model's ability to predict descriptions improve over time.

At earlier steps in the training, there's likely issues with the descriptions, such as repeated sentences as the model gets stuck in its predictive loop or unfinished sentences. The model's predictions become steadily more accurate as training progresses. By step 64, the model's predictions should closely resemble the descriptions provided by the training data.

This process takes around 15 minutes to complete on T4 TPUs.
"""

# Commented out IPython magic to ensure Python compatibility.
# # Run a short training loop with cosine learning rate schedule.
# #
# # Note: the first step can be quite slow on some machines (up to several minutes)
# # due to XLA compilation of the jax.jit'd function.
# #
# %%time
# 
# BATCH_SIZE = 1
# TRAIN_EXAMPLES = 400
# LEARNING_RATE = 0.005
# 
# TRAIN_STEPS = TRAIN_EXAMPLES // BATCH_SIZE
# EVAL_STEPS = TRAIN_STEPS // 8
# 
# train_data_it = train_data_iterator()
# 
# sched_fn = big_vision.utils.create_learning_rate_schedule(
#     total_steps=TRAIN_STEPS+1, base=LEARNING_RATE,
#     decay_type="cosine", warmup_percent=0.10)
# 
# for step in range(1, TRAIN_STEPS+1):
#   # Make list of N training examples.
#   examples = [next(train_data_it) for _ in range(BATCH_SIZE)]
# 
#   # Convert list of examples into a dict of np.arrays and load onto devices.
#   batch = jax.tree.map(lambda *x: np.stack(x), *examples)
#   batch = big_vision.utils.reshard(batch, data_sharding)
# 
#   # Training step and report training loss
#   learning_rate = sched_fn(step)
#   params, loss = update_fn(params, batch, learning_rate)
# 
#   loss = jax.device_get(loss)
#   print(f"step: {step:2d}/{TRAIN_STEPS:2d}   lr: {learning_rate:.5f}   loss: {loss:.4f}")
# 
#   if (step % EVAL_STEPS) == 0:
#     print(f"Model predictions at step {step}")
#     html_out = ""
#     for image, _, caption in make_predictions(
#         validation_data_iterator(), num_examples=4, batch_size=1):
#       html_out += render_example(image, caption)
#     display(HTML(html_out))
#

"""## Evaluate fine-tuned model"""

# @title Visualize results
html_out = ""
for image, _, caption in make_predictions(validation_data_iterator(), num_examples=16, batch_size=1):
  html_out += render_example(image, caption)
display(HTML(html_out))

# @title Collect predictions
targets = []
predictions = []

for image, label, prediction in make_predictions(validation_data_iterator(), num_examples=312, batch_size=1):
    h, w, _ = image.shape
    target = sv.Detections.from_lmm(
        lmm='paligemma',
        result=label,
        resolution_wh=(w, h),
        classes=CLASSES)
    targets.append(target)
    prediction = sv.Detections.from_lmm(
        lmm='paligemma',
        result=prediction,
        resolution_wh=(w, h),
        classes=CLASSES)
    prediction.confidence = np.ones(len(prediction))
    predictions.append(prediction)

# @title Calculate mAP
mean_average_precision = sv.MeanAveragePrecision.from_detections(
    predictions=predictions,
    targets=targets,
)

print(f"map50_95: {mean_average_precision.map50_95:.6f}")
print(f"map50: {mean_average_precision.map50:.6f}")
print(f"map75: {mean_average_precision.map75:.6f}")

# @title Calculate Confusion Matrix
confusion_matrix = sv.ConfusionMatrix.from_detections(
    predictions=predictions,
    targets=targets,
    classes=CLASSES
)

_ = confusion_matrix.plot()

"""## Save fine-tuned model locally"""

import os

TARGET_MODEL_DIR = f"{dataset.location}/model"
TARGET_MODEL_PATH = f"{TARGET_MODEL_DIR}/paligemma-3b-pt-224.f16.npz"

os.makedirs(TARGET_MODEL_DIR, exist_ok=True)

flat, _ = big_vision.utils.tree_flatten_with_names(params)
with open(TARGET_MODEL_PATH, "wb") as f:
  np.savez(f, **{k: v for k, v in flat})

"""## Deploy model on Roboflow"""

version.deploy(model_type="paligemma-3b-pt-224", model_path=TARGET_MODEL_DIR)

"""# Congratulations

⭐️ If you enjoyed this notebook, [**star the Roboflow Notebooks repo**](https://github.com/roboflow/notebooks) (and [**supervision**](https://github.com/roboflow/supervision) while you're at it) and let us know what tutorials you'd like to see us do next. ⭐️
"""